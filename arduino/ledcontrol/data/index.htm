<html>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<head>

<!--
  <style>
  div,fieldset,input,select{padding:5px;font-size:1em;}
  input{width:100%;box-sizing:border-box;-webkit-box-sizing:border-box;-moz-box-sizing:border-box;}
  select{width:80%;}
  textarea{resize:none;width:98%;height:318px;padding:5px;overflow:auto;}
  body{text-align:center;font-family:verdana;}
  td{padding:0px;}
  button{border:0;border-radius:0.3rem;background-color:#1fa3ec;color:#fff;line-height:2.4rem;font-size:1.2rem;width:100%;-webkit-transition-duration:0.4s;transition-duration:0.4s;}
  button:hover{background-color:#006cba;}
  a{text-decoration:none;}
  .p{float:left;text-align:left;}
  .q{float:right;text-align:right;}
  </style>
 -->
 
 </head>



 <body>LED Control:<br/><br/>

 <div id="patternButtons">
 
 </div> <br/><br/>
 
 
 H: <input id="H" type="range" min="0" max="255" step="1" oninput="ledHue(this.value);"/><br/>
 S: <input id="S" type="range" min="0" max="255" step="1" oninput="ledSaturation(this.value);"/><br/>
 V: <input id="V" type="range" min="0" max="255" step="1" oninput="ledValue(this.value);" /><br/>
 W: <input id="W" type="range" min="0" max="1023" step="1" oninput="whiteLedValue(this.value);" /><br/> <br />
 Spd: <input id="SPD" type="range" min="0" max="100" step="1" oninput="animationSpeedSet(this.value);" /><br/> <br />
 FireCooling: <input id="COOL" type="range" min="0" max="25" step="1" oninput="selectFireCooling(this.value);" /><br/> <br />
 FireSparking: <input id="Spark" type="range" min="0" max="100" step="1" oninput="selectFireSparking(this.value);" /><br/> <br />
 <button onclick="sleepTime(document.getElementById('sleepMinutes').value);">Sleep</button>: <input type="text" size="4" id="sleepMinutes" value="60"/><br /><br />
 <input id="Sleep" oninput="document.getElementById('sleepMinutes').value=this.value;" type="range" min="1" max="120" step="1" value="60"/><br/><br />
	
 Device ip-address (for socket connection):
 <input type="text" id="ip" value=""/><button onclick='mod()'>Connect</button><br />
 Change the mqtt ip-address:
 <input type="text" id="mqttip" value="" onblur='sendMqttIp()' /><button onclick='sendMqttIp()'>Set</button><br />
 Change the mqtt port (default 1883, max 16bits):
 <input type="text" id="mqttport" value="1883" /><button onclick='sendMqttPort()'>Set</button><br />
 Change the mqtt topic (max 15 characters):
 <input type="text" id="mqtttopic" value="" /><button onclick='sendMqttTopic()'>Set</button><br />
 <br><br>Debug patterns:
 <input type="text" id="patterns" value=""/><br />
 ESP message:
 <input type="text" id="msgESP" value=""/><br />
 <button onclick='sendRestart()'>Restart ESP</button>
 <br />

  </body>
 <footer>
 <script>


var ipValue;
var connection;
var patterns = [];
function mod() {
    
    var text = document.getElementById('ip').value;
    text = "ws://"+text+":81/";
    ipValue = text;	
    if(connection){connection.close();}
    connection = new WebSocket(ipValue, ['arduino']); 
    connection.onopen = function () {  console.log('Connected');};
    connection.onerror = function (error) {console.log('WebSocket Error ',error);};
    connection.onmessage = function (msg) {webEvent(msg);};
    console.log(text)
    console.log("IP value changed to:"+ipValue);
}

function sendMqttIp() {
    var text = document.getElementById('mqttip').value;    
    connection.send("m"+text)
}	

function sendMqttTopic() {
    var text = document.getElementById('mqtttopic').value;    
    connection.send("t"+text)
}	

function sendMqttPort() {
    var text = document.getElementById('mqttport').value;    
    connection.send("p"+text)
}

function sendRestart() {
    connection.send("restart")
}

function sleepTime(newValue) {
	connection.send("f"+newValue*60); 
};

function ledHue(newValue) {
	connection.send("b"+newValue); 
};
function ledSaturation(newValue) {
	connection.send("c"+newValue); 
};
function ledValue(newValue) {
	connection.send("d"+newValue); 
};
function whiteLedValue(newValue) {
	connection.send("e"+newValue); 
};
function animationSpeedSet(newValue){
	connection.send("t"+newValue)
}
function selectAnimation(aPattern){
	connection.send("a"+aPattern.substring(3))
}

function webEvent(evt) {
        	if (evt.data.substring(0,1)=="H") {
        		document.getElementById('H').value=evt.data.substring(evt.data.indexOf("H")+1,evt.data.indexOf(",S")); 
        		document.getElementById('S').value=evt.data.substring(evt.data.indexOf("S")+1,evt.data.indexOf(",V"));
        		document.getElementById('V').value=evt.data.substring(evt.data.indexOf("V")+1,evt.data.indexOf(",W"));
                document.getElementById('W').value=evt.data.substring(evt.data.indexOf("W")+1,evt.data.indexOf(",T"));
			    document.getElementById('SPD').value=evt.data.substring(evt.data.indexOf("T")+1,evt.data.indexOf(",F"));
				document.getElementById('sleepMinutes').value=(evt.data.substring(evt.data.indexOf("F")+1));
				document.getElementById('Sleep').value=(evt.data.substring(evt.data.indexOf("F")+1));
				} 
			else if (evt.data.substring(0,5)=="PROGS"){
				var patternString = evt.data.substring(5)
					document.getElementById("patterns").value = patternString
					createPatternButtons(patternString.split(','))
				}	
			else {
        		document.getElementById('msgESP').value=evt.data;
        	}
}

function createPatternButtons(aListOfPatterns){
    document.getElementById('patternButtons').innerHTML = "";
	var btn;
	var textbtn;
	patterns = aListOfPatterns
	for (aPattern in aListOfPatterns){
		btn = document.createElement("BUTTON")
		textbtn = document.createTextNode(aListOfPatterns[aPattern])
		btn.appendChild(textbtn)
		btn.id="PAT"+aPattern
		btn.addEventListener("click",function(){selectAnimation(this.id)},false)
		document.getElementById('patternButtons').appendChild(btn)
		document.getElementById('patternButtons').appendChild(document.createTextNode(" "))
		

		
	}
}

function getParameterByName(name, url) {
    if (!url) url = window.location.href;
    name = name.replace(/[\[\]]/g, "\\$&");
    var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
        results = regex.exec(url);
    if (!results) return null;
    if (!results[2]) return '';
    return decodeURIComponent(results[2].replace(/\+/g, " "));
}

 
 var ipPath = getParameterByName('ip');
 console.log("path=" + ipPath)
 if(ipPath===null){
		ipPath = location.hostname
} else {
    document.getElementById('ip').value = ipPath
}
 console.log("path=" + ipPath)
 
 mod();
 </script>
 </footer>
</html>
 
